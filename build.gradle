/**
 * MIT License
 *
 * Copyright 2020 basdxz
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
 * CONTRACT, TORT  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * TODO: Tutorial on how to install JDK8 and setup Intellij for PC, Linux and Mac
 * TODO: Expand example to a multi-project build
 * TODO: Explain how to setup Travis CI
 */

//Repos and Deps of the Gradle buildscript are listed here.
buildscript {
    /**
     * In general, mavenCentral has most of the plugins you will need for this. If you need additional plugins,
     * they will list what repository they come from or what dependencies they require.
     *
     * Repositories are defined as:
     *
     * For Maven:
     * maven {
     *      name = "name-of-repo"
     *      url = "path-to-repo"
     * }
     *
     * For Ivy:
     * ivy {
     *      name = "name-of-repo"
     *      artifactPattern "path-to-repo/[module]-[revision].[ext]"
     * }
     *
     * Some real examples include:
     *
     * For Maven:
     * maven {
     *      name = "JitPack Maven"
     *      url = "https://jitpack.io"
     * }
     * Bonus Info: JitPack can build and provide dependencies straight from GitHub
     *
     * For Ivy:
     * ivy {
     *      name = 'GTNH Ivy'
     *      artifactPattern "https://downloads.gtnewhorizons.com/Mods_for_Jenkins/[module]-[revision].[ext]"
     * }
     *
     * There are also mavenCentral() and jcenter(), which are Maven repositories built into the Gradle wrapper.
     */
    repositories {
        mavenCentral()
        //Uncomment to use Shadow
        //jcenter()
        maven {
            name = "Forge Maven"
            url = "https://files.minecraftforge.net/maven"
        }
        maven {
            name = "Sonatype Maven"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            name = "JitPack Maven"
            url = "https://jitpack.io"
        }
    }
    /**
     * The classpath dependency configuration is used for dependencies needed for the buildscript to run.
     *
     * The dependency format is generally:
     * dep-conf name: "name-of-dep", group: "name-of-repo", version: "version-of-repo"
     *
     * An example would be:
     * classpath name: "shadow", group: "com.github.jengelman.gradle.plugins", version: "1.2.3"
     */
    dependencies {
        classpath name: "ForgeGradle",    group: "com.github.CDAGaming",                version: "1c670759c5"
        //Original ForgeGradle plugin, requires downgrade to Gradle 4.4.1
        //classpath name: "ForgeGradle",    group: "net.minecraftforge.gradle",           version: "1.2-SNAPSHOT"
        //Uncomment to use Shadow
        //classpath name: "shadow",         group: "com.github.jengelman.gradle.plugins", version: "1.2.3"
    }
}

//Buildscript plugins are listed here
apply plugin: 'forge'
apply plugin: 'idea'
//Uncomment to use Shadow
//apply plugin: 'com.github.johnrengelman.shadow'

//Assumes this and all related projects are JDK 8 based.
//Essential so tasks generate correctly.
allprojects {
    apply plugin: 'java'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

//Tells Intellij to download the Javadoc and Sources for any loaded dependencies from their repos if available.
idea{
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

//Adds a git commit dependent appendage to the file name
//Helps to differentiate artefacts if you don't up the version.
static def getVersionAppendage() {
    def proc = "git rev-parse --short HEAD".execute()
    proc.waitFor()
    return "DEV." + proc.exitValue() ? proc.text.trim() : "GITBORK"
}

//Loads configs from gradle.properties
ext {
    modid       =   "${project_modid}"
    modname     =   "${project_name}"
    modversion  =   "${project_version}"
    modgithead  =   getVersionAppendage()
    modauthors  =   "${project_authors}"
    modurl      =   "${project_url}"
    modupdateurl=   "${project_update_url}"
    modcredits  =   "${project_credits}"
}
//Should follow: https://maven.apache.org/guides/mini/guide-naming-conventions.html
group = "${project_group}"
//Follows modid by default, name of the *.jar
archivesBaseName = "${project_modid}"
//Appended to the end of the *.jar after archivesBaseName
version = "1.7.10-" + modversion + "-" + modgithead

minecraft {
    //Version of Forge Mod Loader to use
    version = "1.7.10-10.13.4.1614-1.7.10"
    //Directory where runClient or runServer executes from, sometimes set as eclipse
    runDir = "run"
    //Replaces values in the Reference.java at compile time
    replaceIn "${project_reference}"
    replace "@MODID@",      modid
    replace "@NAME@",       modname
    replace "@VERSION@",    modversion
}

//Extends the shadow dependency configuration with compileOnly
configurations {
    compileOnly.extendsFrom shadow
}

/**
 * Gradle supports Maven and Ivy repositories to download dependencies. You can find more repositories online or from
 * build.gradle's of other mod's repositories. A good source is looking at sources over from open source CurseForge mods.
 * A good number of useful repos are included but commented out, the ones present are used for loading the included
 * runtime libraries.
 *
 * Dependencies loaded during the buildscript phase carry over to here, so there is no need to include them twice.
 * E.G. Maven Central.
 *
 * Repositories are defined as:
 *
 * For Maven:
 * maven {
 *      name = "name-of-repo"
 *      url = "path-to-repo"
 * }
 *
 * For Ivy:
 * ivy {
 *      name = "name-of-repo"
 *      artifactPattern "path-to-repo/[module]-[revision].[ext]"
 * }
 *
 * Some real examples include:
 *
 * For Maven:
 * maven {
 *     name = "UsrvDE Maven"
 *     url = "https://jenkins.usrv.eu:8081/nexus/content/repositories/releases/"
 * }
 *
 * For Ivy:
 * ivy {
 *      name = 'GTNH Ivy'
 *      artifactPattern "https://downloads.gtnewhorizons.com/Mods_for_Jenkins/[module]-[revision].[ext]"
 * }
 */
repositories {
    maven {
        name = "GregTech Maven"
        url = "https://gregtech.overminddl1.com/"
    }
    maven {
        name =  "OpenComputers Maven"
        url = "https://maven.cil.li/"
    }
    maven {
        name = "Curse Maven"
        url = "https://www.cursemaven.com"
    }
    //maven {
    //    name = "UsrvDE Maven"
    //    url = "https://jenkins.usrv.eu:8081/nexus/content/repositories/releases/"
    //}
    //maven {
    //    name = "IC2 Maven"
    //    url = "https://maven.ic2.player.to/"
    //}
    //maven {
    //    name 'MC Mod Dev Maven'
    //    url 'https://maven.mcmoddev.com/'
    //}
    //maven {
    //    name = "Tterrag Maven"
    //    url = "https://maven.tterrag.com/"
    //}
    //ivy {
    //    name = "GTNH Ivy"
    //    artifactPattern "https://downloads.gtnewhorizons.com/Mods_for_Jenkins/[module]-[revision].[ext]"
    //}
}

/**
 * Dependencies can be loaded from ./libs to build and use during runClient
 * You will have to manually right click these and select 'Add Library' in Intellij
 * Additionally, on first reference these will need to be added to your classpath which Intellij will tell you about.
 *
 * If you wish to use Maven or Ivy repositories, you may define dependencies as shown:
 *
 * For Maven:
 * dep-conf name: "dep-name", group: "dep.group.here", version: dep_version, classifier: "dev"
 * dep-conf name: "dep-name", group: "dep.group.here", version: dep_version
 *
 * For Ivy:
 * compile name: 'dep-name', version: 'dep-version', ext: 'dep-ext'
 *
 * Some real world examples include:
 *
 * For Maven:
 * compile name: "buildcraft", group: "com.mod-buildcraft", version: 6.0.8, classifier: "dev"
 * runtime name: "Waila", group: "mcp.mobius.waila", version: 1.5.10_1.7.10
 *
 * For Ivy:
 * compile name: 'CoFHCore', version: '[1.7.10]3.1.4-329-dev', ext: 'jar'
 *
 * For more information on Gradle 4.4.1 visit:
 * https://docs.gradle.org/5.6.4/userguide/java_plugin.html
 * https://docs.gradle.org/current/userguide/dependency_management.html
 *
 * The most useful dep configs are:
 * compile      - dep is present during build and runClient
 * compileOnly  - dep is only present during build not but runClient
 * runtime      - dep is only present during runClient
 *
 * A special one being shadow, which is disabled by default in this config but can be easily uncomented.
 * shadow       - dep is intended to be partially or fully built into the built mod, often combined with compileOnly
 *
 * Additional information: The suffix dev or deobf tends to imply that the comments and variable names have been kept
 * intact. By default, you will have NEI, Waila and Inventory Tweaks present in the environment.
 *
 * If a development version of the dependency is not required, it is almost always present on the CurseForge Maven.
 *
 * For more information about the CurseForge Maven visit:
 * https://authors.curseforge.com/knowledge-base/projects/529-api
 *
 * This config implements the CurseMaven helper plugin from: https://www.cursemaven.com/
 *
 * As an example, Inventory Tweaks is loaded using CurseMaven.
 * https://www.curseforge.com/minecraft/mc-mods/inventory-tweaks/files/2210792
 *
 * CurseMaven is present in the repositories under Curse Maven. Then under dependencies the mod is loaded as:
 * runtime name: "inventory-tweaks", group: "curse.maven", version: 2210792
 *
 * Which adds the 1.59-dev-152 version of Inventory Tweaks to be added to runClient only at runtime.
 *
 */
dependencies {
    runtime name: "NotEnoughItems",     group: "codechicken",       version: nei_version,       classifier: "dev"
    runtime name: "CodeChickenLib",     group: "codechicken",       version: ccl_version,       classifier: "dev"
    runtime name: "CodeChickenCore",    group: "codechicken",       version: ccc_version,       classifier: "dev"
    runtime name: "Waila",              group: "mcp.mobius.waila",  version: waila_version
    //runtime name: "inventory-tweaks",   group: "curse.maven",       version: inv_tweaks_version
    //Uncomment as part of shadow example
    //shadow  name: "reactor-core",       group: "io.projectreactor", version: reactor_version
}

//Creates deobfuscated jar
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
}

//Creates source code jar
task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

//Expands artifacts
artifacts {
    archives deobfJar
    archives sourceJar
}

/**
 * The Shadow plugin allows for the inclusion of external libraries into your own *.jar
 *
 * The relocate method is called for copying packages from libraries into the final jar.
 *
 * As an example:
 * relocate "package-group",                 "project-group.shadowlibs.package-group"
 *
 * And as a real world example:
 * relocate "reactor",                 "com.github.basdxz.examplemod.shadowlibs.reactor"
 *
 * Some libraries might include more than one group, this will require multiple relocate methods.
 * While you can relocate right into the matching group as before, this should be avoided.
 * As if another mod has matching package names due to, as an example, shadowing the same libraries.
 * You will experience incompatibilities.
 */
//Uncomment to use Shadow
//shadowJar {
//    //Matches the shadow jar with the normal jar, vital for reobf.
//    //Or this task adds -all to the jar file, which again breaks reobf.
//    archiveName = tasks.jar.archiveName
//    //Set the configurations, to exclude all the other compile time libraries.
//    configurations = [project.configurations.shadow]
//    //Uncomment as part of shadow example
//    //relocate "reactor",                 "${project_group}.shadowlibs.reactor"
//    //relocate "org.reactivestreams",     "${project_group}.shadowlibs.org.reactivestreams"
//}

/**
 * Expands the jar task to put more info into the META-INF/MANIFEST.MF inside the final *.jar
 * The manifest follows Oracle spec from: https://docs.oracle.com/javase/tutorial/deployment/jar/packageman.html
 * "Specification-Title": Java Utility Classes
 * "Specification-Version": 1.2
 * "Specification-Vendor": Example Tech, Inc.
 * "Implementation-Title": java.util
 * "Implementation-Version": build57
 * "Implementation-Vendor": Example Tech, Inc.
 *
 * Breaking it down:
 * Specification-Title is the the full name of your Mod
 * Specification-Version is the feature/bugfix version
 * Specification-Vendor is the mod author('s)
 * Implementation-Title is the mod package group
 * Implementation-Version is the build or git HEAD
 * Implementation-Vendor is again, the mod author('s)
 *
 * As a complete example of the final manifest:
 * "Specification-Title": Example Mod
 * "Specification-Version": 1.2.5
 * "Specification-Vendor": basdxz
 * "Implementation-Title": com.github.basdxz.examplemod
 * "Implementation-Version": e42935f
 * "Implementation-Vendor": basdxz
 *
 * Additionally, a timestamp is included by default:
 * "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
 *
 * This includes the build date as yyyy-MM-dd'T'HH:mm:ssZ
 *
 * Finally, the jar task is configured to depend on the shadowJar.
 */
jar {
    manifest {
        attributes(
                [
                        "Specification-Title"     : modname,
                        "Specification-Version"   : modversion,
                        "Specification-Vendor"    : modauthors,
                        "Implementation-Title"    : modname,
                        "Implementation-Version"  : modgithead,
                        "Implementation-Vendor"   : modauthors,
                        "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
                ]
        )
    }
    //Uncomment to use Shadow
    //dependsOn shadowJar
    ////Stops the jar task overriding the shadowJar
    //enabled = false
}

//Replaces values inside mcmod.info during build time.
processResources {
    //List of properties that will trigger this task to rerun when changed.
    inputs.property 'modid',        project.modid
    inputs.property 'name',         project.modname
    inputs.property 'version',      project.modversion
    inputs.property 'authorList',   project.modauthors
    inputs.property 'url',          project.modurl
    inputs.property 'updateUrl',    project.modupdateurl
    inputs.property 'credits',      project.modcredits

    //Replaces values only in mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        //Replace the properties, must include every
        expand  'modid':        project.modid,
                'name':         project.modname,
                'version':      project.modversion,
                'authorList':   project.modauthors,
                'url':          project.modurl,
                'updateUrl':    project.modupdateurl,
                'credits':      project.modcredits
    }

    //Copy everything else, that's not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}
